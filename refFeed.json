{"slots":{"0":{"name":"input","type":{"methods":[],"events":[]},"class":"ItemContainer"},"1":{"name":"transfer","type":{"methods":[],"events":[]},"class":"IndustryUnit"},"2":{"name":"slot2","type":{"methods":[],"events":[]}},"3":{"name":"slot3","type":{"methods":[],"events":[]}},"4":{"name":"slot4","type":{"methods":[],"events":[]}},"5":{"name":"slot5","type":{"methods":[],"events":[]}},"6":{"name":"slot6","type":{"methods":[],"events":[]}},"7":{"name":"slot7","type":{"methods":[],"events":[]}},"8":{"name":"slot8","type":{"methods":[],"events":[]}},"9":{"name":"slot9","type":{"methods":[],"events":[]}},"10":{"name":"slot10","type":{"methods":[],"events":[]}},"11":{"name":"slot11","type":{"methods":[],"events":[]}},"12":{"name":"slot12","type":{"methods":[],"events":[]}},"13":{"name":"slot13","type":{"methods":[],"events":[]}},"14":{"name":"slot14","type":{"methods":[],"events":[]}},"15":{"name":"slot15","type":{"methods":[],"events":[]}},"16":{"name":"slot16","type":{"methods":[],"events":[]}},"17":{"name":"slot17","type":{"methods":[],"events":[]}},"18":{"name":"slot18","type":{"methods":[],"events":[]}},"19":{"name":"slot19","type":{"methods":[],"events":[]}},"20":{"name":"slot20","type":{"methods":[],"events":[]}},"-5":{"name":"library","type":{"methods":[],"events":[]}},"-4":{"name":"system","type":{"methods":[],"events":[]}},"-3":{"name":"player","type":{"methods":[],"events":[]}},"-2":{"name":"construct","type":{"methods":[],"events":[]}},"-1":{"name":"unit","type":{"methods":[],"events":[]}}},"handlers":[{"key":46,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"function library.addEventHandlers(a)if not a or a.onEvent and a.triggerEvent then return false end;local b,c,d='table','function','thread'if b~=type(a)then error('You can only add event handlers to table objects!')end;local e={}local function f(a)local g=type(a)return c==g or b==g and f(getmetatable(a).__call)or d==g end;a.onEvent=function(self,h,i,j)if not f(i)then error('Event handler must be a function, a callable object or a thread!')end;j=j or self;if b~=type(j)then error('The value of self must be a table!')end;if not e[h]then e[h]={_=0}end;local k=d==type(i)and function(...)coroutine.resume(i,...)end or i;local i=e[h]local l=i._+1;i[l]={k,j}i._=l;return l end;a.clearEvent=function(self,h,m)if e[h]and e[h][m]then e[h][m]=nil end end;a.triggerEvent=function(self,h,...)local n=e[h]if n then for o=1,n._ do local i=n[o]if i then i[1](i[2],...)end end end end;return true end\nlocal a=DULibrary or{}function a.getLinks(b,c)local d={}if not b then b={}end;local e=0;for f,g in pairs(unit)do if'table'==type(g)and'function'==type(g.getClass)then local h=true;for i,j in pairs(b)do if not('function'==type(g[i])and j==g[i]():sub(1,#j))then h=false end end;if h then e=e+1;if c then f=e end;d[f]=g end end end;return d end;function a.getLinksByClass(k,c)return a.getLinks({getClass=k},c)end;function a.getLinkByClass(k)return a.getLinksByClass(k,true)[1]end;function a.getCoreUnit()return a.getLinkByClass('CoreUnit')end;function a.getLinkByName(l)local m=a.getCoreUnit()if not m then error('getLinkByName requires a linked CoreUnit to work')end;local d=a.getLinks()for n,g in pairs(d)do if l==m.getElementNameById(g.getLocalId())then return g end end end\n"},{"key":47,"filter":{"slotKey":-4,"signature":"onActionStart(action)","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onActionStart\",action)"},{"key":48,"filter":{"slotKey":-4,"signature":"onActionLoop(action)","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onActionLoop\",action)"},{"key":49,"filter":{"slotKey":-4,"signature":"onActionStop(action)","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onActionStop\",action)"},{"key":50,"filter":{"slotKey":-4,"signature":"onUpdate()","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onUpdate\")"},{"key":51,"filter":{"slotKey":-4,"signature":"onFlush()","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onFlush\")"},{"key":52,"filter":{"slotKey":-4,"signature":"onInputText(text)","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onInputText\",text)"},{"key":53,"filter":{"slotKey":-4,"signature":"onCameraChanged(mode)","args":[{"variable":"*"}]},"code":"system:triggerEvent(\"onCameraChanged\",mode)"},{"key":54,"filter":{"slotKey":-3,"signature":"onParentChanged(oldId,newId)","args":[{"variable":"*"},{"variable":"*"}]},"code":"player:triggerEvent(\"onParentChanged\",oldId,newId)"},{"key":55,"filter":{"slotKey":-2,"signature":"onDocked(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent(\"onDocked\",id)"},{"key":56,"filter":{"slotKey":-2,"signature":"onUndocked(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent(\"onUndocked\",id)"},{"key":57,"filter":{"slotKey":-2,"signature":"onPlayerBoarded(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent(\"onPlayerBoarded\",id)"},{"key":58,"filter":{"slotKey":-2,"signature":"onVRStationEntered(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent(\"onVRStationEntered\",id)"},{"key":59,"filter":{"slotKey":-2,"signature":"onConstructDocked(id)","args":[{"variable":"*"}]},"code":"construct:triggerEvent(\"onConstructDocked\",id)"},{"key":60,"filter":{"slotKey":-2,"signature":"onPvPTimer(active)","args":[{"variable":"*"}]},"code":"construct:triggerEvent(\"onPvPTimer\",active)"},{"key":61,"filter":{"slotKey":-1,"signature":"onStart()","args":[{"variable":"*"}]},"code":"unit:triggerEvent(\"onStart\")"},{"key":62,"filter":{"slotKey":-1,"signature":"onStop()","args":[{"variable":"*"}]},"code":"unit:triggerEvent(\"onStop\")"},{"key":63,"filter":{"slotKey":-1,"signature":"onTimer(timerId)","args":[{"variable":"*"}]},"code":"unit:triggerEvent(\"onTimer\",timerId)"},{"key":64,"filter":{"slotKey":0,"signature":"onContentUpdate()","args":[{"variable":"*"}]},"code":"input:triggerEvent(\"onContentUpdate\")"},{"key":65,"filter":{"slotKey":1,"signature":"onStarted(id,quantity)","args":[{"variable":"*"},{"variable":"*"}]},"code":"transfer:triggerEvent(\"onStarted\",id,quantity)"},{"key":66,"filter":{"slotKey":1,"signature":"onCompleted(id,quantity)","args":[{"variable":"*"},{"variable":"*"}]},"code":"transfer:triggerEvent(\"onCompleted\",id,quantity)"},{"key":67,"filter":{"slotKey":1,"signature":"onStatusChanged(status)","args":[{"variable":"*"}]},"code":"transfer:triggerEvent(\"onStatusChanged\",status)"},{"key":68,"filter":{"slotKey":1,"signature":"onBankUpdate()","args":[{"variable":"*"}]},"code":"transfer:triggerEvent(\"onBankUpdate\")"},{"key":69,"filter":{"slotKey":-5,"signature":"onStart()","args":[{"variable":"*"}]},"code":"-- Setup improved event handlers\nif not __EVENTS then\nlibrary.addEventHandlers(library)\nlibrary.addEventHandlers(system)\nlibrary.addEventHandlers(player)\nlibrary.addEventHandlers(construct)\nlibrary.addEventHandlers(unit)\nlibrary.addEventHandlers(input)\nlibrary.addEventHandlers(transfer)\n__EVENTS=true\nend"},{"key":70,"filter":{"slotKey":-1,"signature":"onStart()","args":[{"variable":"*"}]},"code":"\nlocal amount=30000 --export\n\n\nlocal itemID={262147665, 299255727, 3724036288, 4234772167} --export\n\n\nlocal content\nlocal pId = 1\n\nif (amount == nil or amount < 0) or #itemID == 0 then\n  system.setScreen('<p style=\"font-size: 80px; text-align: center; padding-top: '.. system.getScreenHeight()/4 ..'px;\">Please check if the lua parameters are correct</p>')\n  system.showScreen(true)\n  unit.setTimer('exitA3', 3)\n  return\nelse\n\n  local itemExist = false\n  local notExist = ''\n  \n  for k,v in ipairs(itemID) do\n    if system.getItem(v).id == 0 then\n       notExist = notExist .. system.getItem(v).displayName .. ', '\n    end\n  end\n    \n    if #notExist == 0 then\n        itemExist = true\n    end\n    \n    notExist = string.sub(notExist, 0, #notExist - 2)\n\n  if not itemExist then\n      system.setScreen('<p style=\"font-size: 80px; text-align: center; padding-top: '.. system.getScreenHeight()/4 ..'px;\">'.. notExist .. ' does not exist</p>')\n      system.showScreen(true)\n      unit.setTimer('exitA3', 3)\n      return\n  else\n    local itemNames = ''\n\n    for i, v in ipairs(itemID) do\n      itemNames = itemNames .. system.getItem(v).displayName .. ', '\n    end\n\n    itemNames = string.sub(itemNames, 0, #itemNames - 2)\n\n      system.setScreen('<p style=\"font-size: 80px; text-align: center; padding-top: '.. system.getScreenHeight()/4 ..'px;\">Items found: '.. itemNames ..'</p>')\n      system.showScreen(true)\n      unit.setTimer('screenA3', 3)\n      input.updateContent()\n      unit.setTimer('update', 30)\n  end\nend\n\nlocal function exitA3()\n  unit.exit()\nend\n\nlocal function screenA3()\n  system.showScreen(0)\nend\n\nlocal function update()\n  input.updateContent()\nend\n\nunit:onEvent('onTimer', function (source, timerID)\n  if timerID == 'exitA3' then\n    exitA3()\n  elseif timerID == 'screenA3' then\n    screenA3()\n  elseif timerID == 'update' then\n    update()\n  end\nend)\n\ninput:onEvent('onContentUpdate', function (source)\n  content = input.getContent()\n\n  if #content == 0 then\n    return\n  end\n\n  if transfer.getState() ~= 1 then\n    return\n  end\n\n  ::again::\n\n  local isItemInStorage = false --Bool for the existence for the Item in Container\n  local item\n\n  for k,v in pairs(content) do\n      if v.id == itemID[pId] then\n          isItemInStorage = true\n          item = v\n      end\n  end\n\n  if isItemInStorage then\n      if item.quantity > amount then\n          transfer.setOutput(item.id)\n          transfer.startFor(math.max(1, math.floor((item.quantity - amount)/transfer.getOutputs()[1].quantity)))\n          pId = pId + 1\n          if pId > #itemID then\n            pId = 1\n            return\n          end\n      end\n    end\n    pId = pId + 1\n    if pId > #itemID then\n      pId = 1\n      return\n    end\n    goto again\nend)\n\ntransfer:onEvent('onStatusChanged', function (source, status)\n  if transfer.getState() ~= 1 then\n    return\n  end\n\n\n  ::again::\n\n  local isItemInStorage = false --Bool for the existence for the Item in Container\n  local item\n\n  for k,v in pairs(content) do\n      if v.id == itemID[pId] then\n          isItemInStorage = true\n          item = v\n      end\n  end\n\n  if isItemInStorage then\n    if item.quantity > amount then\n        transfer.setOutput(item.id)\n        transfer.startFor(math.max(1, math.floor((item.quantity - amount)/transfer.getOutputs()[1].quantity)))\n        pId = pId + 1\n        if pId > #itemID then\n          pId = 1\n          return\n        end\n    end\n  end\n  pId = pId + 1\n  if pId > #itemID then\n    pId = 1\n    return\n  end\n  goto again\nend)"}],"methods":[],"events":[]}